CREATE TABLE provinces (
    id          SERIAL PRIMARY KEY,
    name        VARCHAR(100) UNIQUE NOT NULL,
    country     VARCHAR(100) NOT NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id     INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE
);

CREATE TABLE cities (
    id          SERIAL PRIMARY KEY,
    name        VARCHAR(100) NOT NULL,
    province_id INTEGER NOT NULL REFERENCES provinces(id) ON DELETE CASCADE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (name, province_id) -- Ensures city names are unique within a province,
    user_id     INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE
);
CREATE TABLE user_skills (
    id    SERIAL PRIMARY KEY,
    name  VARCHAR(100) UNIQUE NOT NULL, -- Example: Python, SQL, Leadership, Communication
    type  VARCHAR(10) CHECK (type IN ('soft', 'hard')) NOT NULL -- 'soft' or 'hard',
    user_id     INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE T_Images (
    id          SERIAL PRIMARY KEY,
    user_id     INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE,
    image_url   TEXT NOT NULL,  -- Stores image file path or URL
    image_type  VARCHAR(50) NOT NULL,  -- Defines image usage (profile, cover, document, etc.),
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE T_Users (
    id   SERIAL PRIMARY KEY,
    first_name   VARCHAR(50) NOT NULL,
    last_name    VARCHAR(50) NOT NULL,
    email        VARCHAR(100) UNIQUE NOT NULL,
    phone      VARCHAR(20) NOT NULL,
    password     TEXT NOT NULL,
    T_Images_ID  INTEGER REFERENCES T_Images(id) ON DELETE CASCADE,  -- Stores profile photo URL
    is_active    BOOLEAN DEFAULT TRUE,
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    province_id  INTEGER NOT NULL REFERENCES provinces(id) ON DELETE RESTRICT,
    city_id      INTEGER NOT NULL REFERENCES cities(id) ON DELETE RESTRICT,
    self_intro   TEXT,  -- User's self-introduction

);
CREATE TABLE user_skills_mapping (
    user_id      INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE,
    skill_id     INTEGER NOT NULL REFERENCES skills(id) ON DELETE CASCADE,
    proficiency  INTEGER CHECK (proficiency BETWEEN 1 AND 5), -- Only for hard skills
    PRIMARY KEY (user_id, skill_id),
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE user_experience (
    id          SERIAL PRIMARY KEY,
    user_id     INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE,
    company     VARCHAR(255) NOT NULL,  -- Company name
    role        VARCHAR(100) NOT NULL,  -- Job title
    start_date  DATE NOT NULL,  -- Start date of the experience
    end_date    DATE,  -- NULL if it's the current job
    is_current  BOOLEAN DEFAULT FALSE,  -- TRUE if it's the most recent job
    description TEXT  -- Optional job description,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE T_BusinessAccounts (
    id              SERIAL PRIMARY KEY,
    user_id         INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE, -- The business owner
    business_name   VARCHAR(255) NOT NULL,
    business_type   VARCHAR(100),
    street_address  TEXT NOT NULL,
    customer_details VARCHAR(255),
    business_details VARCHAR(255),
    business_line VARCHAR(255),
    city_id         INTEGER NOT NULL REFERENCES T_Cities(id) ON DELETE RESTRICT,
    province_id     INTEGER NOT NULL REFERENCES T_Provinces(id) ON DELETE RESTRICT,
    postal_code     VARCHAR(20),
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    business_usp   TEXT,
    business_values   TEXT,
    business_vision   TEXT
);
CREATE TABLE T_BusinessLocations (
    id            SERIAL PRIMARY KEY,
    business_id   INTEGER NOT NULL REFERENCES T_BusinessAccounts(id) ON DELETE CASCADE,
    location_name VARCHAR(255),  -- Example: 'Head Office', 'Branch 1'
    street_address TEXT NOT NULL,
    city_id       INTEGER NOT NULL REFERENCES T_Cities(id) ON DELETE RESTRICT,
    province_id   INTEGER NOT NULL REFERENCES T_Provinces(id) ON DELETE RESTRICT,
    postal_code   VARCHAR(20),
    country       VARCHAR(100),
    latitude      DECIMAL(10, 6),  -- Optional for map integration
    longitude     DECIMAL(10, 6),  -- Optional for map integration
    created_at    TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE T_BusinessProperties (
    id          SERIAL PRIMARY KEY,
    group_name        VARCHAR(100) UNIQUE NOT NULL,  -- Example: 'age_group', 'gender', 'education_level'
    description TEXT,                           -- Example: 'Customer age range targeted by the business'
    is_active    BOOLEAN DEFAULT TRUE,
    is_displayed BOOLEAN DEFAULT TRUE
);

CREATE TABLE T_BusinessPropertyValues (
    id          SERIAL PRIMARY KEY,
    property_id INTEGER NOT NULL REFERENCES T_BusinessProperties(id) ON DELETE CASCADE,
    value       VARCHAR(100) NOT NULL,  -- Example: '18-24', 'Male', 'Bachelorâ€™s'
    description TEXT,                     -- Example: 'Young adults aged 18 to 24'
    is_active    BOOLEAN DEFAULT TRUE,
    is_displayed BOOLEAN DEFAULT TRUE
);

CREATE TABLE T_BusinessPropertyAssignments (
    id           SERIAL PRIMARY KEY,
    business_id  INTEGER NOT NULL REFERENCES T_BusinessAccounts(id) ON DELETE CASCADE,
    property_value_id INTEGER NOT NULL REFERENCES T_BusinessPropertyValues(id) ON DELETE CASCADE
);

CREATE TABLE T_BusinessRepresentatives (
    id                SERIAL PRIMARY KEY,
    business_id       INTEGER NOT NULL REFERENCES T_BusinessAccounts(id) ON DELETE CASCADE,
    first_name        VARCHAR(100) NOT NULL,
    last_name         VARCHAR(100) NOT NULL,
    phone             VARCHAR(20) UNIQUE NOT NULL,  -- Ensure unique phone numbers
    position          VARCHAR(150) NOT NULL,        -- Example: CEO, Manager, Sales Lead
    professional_summary TEXT,                      -- Short bio or summary
    T_Images_ID  INTEGER REFERENCES T_Images(id) ON DELETE CASCADE,  -- Stores profile photo URL
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE T_BusinessTeams (
    id           SERIAL PRIMARY KEY,
    business_id  INTEGER NOT NULL REFERENCES T_BusinessAccounts(id) ON DELETE CASCADE,
    team_name    VARCHAR(255) NOT NULL,  -- Example: 'Marketing Team', 'Development Team'
    description  TEXT,  -- Brief description of the team
    created_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE T_TeamInvites (
    id               SERIAL PRIMARY KEY,
    team_id          INTEGER NOT NULL REFERENCES T_BusinessTeams(id) ON DELETE CASCADE,
    invited_by       INTEGER NOT NULL REFERENCES T_BusinessRepresentatives(id) ON DELETE SET NULL,
    job_tittle  VARCHAR(255) NOT NULL,
    recipient_email  VARCHAR(255) NOT NULL,  -- Email of the invited person
    status           VARCHAR(50) NOT NULL DEFAULT 'pending',  -- 'pending', 'accepted', 'declined', 'expired'
    token            VARCHAR(255) NOT NULL UNIQUE,  -- Unique invitation token for verification
    expires_at       TIMESTAMP NOT NULL,  -- Expiration date of the invite
    created_at       TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE T_PersonalityTypes (
    id              SERIAL PRIMARY KEY,
    user_id      INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE,
    personality_type VARCHAR(100) NOT NULL,
    dominant_btr    VARCHAR(100),
    dominant_disc   VARCHAR(100),
    d_score         INTEGER,
    i_score         INTEGER,
    s_score         INTEGER,
    c_score         INTEGER,
    eq_value        VARCHAR(50),
    adjustment      INTEGER, 
    ambition        INTEGER,
    sociability     INTEGER,
    sensitivity     INTEGER,
    prudence        INTEGER,
    inquisitive     INTEGER,
    learning_approach INTEGER,
    adjustment_score  String, 
    ambition_score    String,
    sociability_score String,
    sensitivity_score String,
    prudence_score    String,
    inquisitive_score String,
    learning_approach_score String,
);

CREATE TABLE T_PersonalityMotivations (
    id              SERIAL PRIMARY KEY,
    personality_id  INTEGER NOT NULL REFERENCES T_PersonalityTypes(id) ON DELETE CASCADE,
    motivation      VARCHAR(255) NOT NULL,
    user_id      INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE
);

CREATE TABLE T_TrainingTypes (
    id               SERIAL PRIMARY KEY,
    training_name    VARCHAR(255) NOT NULL UNIQUE,  -- Name of training type (e.g., "Technical Training")
    description      TEXT  -- Short description of the training type,
    user_id      INTEGER NOT NULL REFERENCES T_Users(id) ON DELETE CASCADE
);

CREATE TABLE T_FetchedTrainingDetails (
    id               SERIAL PRIMARY KEY,
    api_source       VARCHAR(255) NOT NULL,  -- API name or URL from which data was fetched
    training_type_id INTEGER NOT NULL REFERENCES T_TrainingTypes(id) ON DELETE CASCADE,
    external_id      VARCHAR(255) UNIQUE,  -- Unique ID from the external API (if available)
    title           VARCHAR(255) NOT NULL,  -- Training title from API
    description     TEXT,  -- Training description from API
    provider        VARCHAR(255),  -- Organization offering the training
    duration_hours  INTEGER CHECK (duration_hours > 0),  -- Duration in hours
    mode           VARCHAR(50) CHECK (mode IN ('Online', 'Offline', 'Hybrid')),  -- Training mode
    fetched_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Time of API data retrieval
);


CREATE TABLE T_TrainingDetails (
    id                SERIAL PRIMARY KEY,
    training_type_id  INTEGER NOT NULL REFERENCES T_TrainingTypes(id) ON DELETE CASCADE,
    t_fetchedtrainingdetails_id  INTEGER NOT NULL REFERENCES T_FetchedTrainingDetails(id) ON DELETE CASCADE,
    title             VARCHAR(255) NOT NULL,  -- Name of the specific training
    description       TEXT,  -- Detailed description of what the training covers
    provider          VARCHAR(255),  -- Organization or instructor providing the training
    start_date        DATE,  -- Training start date
    end_date          DATE,  -- Training end date
    duration_hours    INTEGER CHECK (duration_hours > 0),  -- Total duration in hours
    mode             VARCHAR(50) CHECK (mode IN ('Online', 'Offline', 'Hybrid')),  -- How the training is conducted
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Record creation timestamp
);





